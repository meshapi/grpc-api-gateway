{{if .NeedsChunkedTransfer }}
{{template "request-func-signature" .}} {
	var metadata gateway.ServerMetadata
	stream, err := client.{{.Method.GetName}}(ctx)
	if err != nil {
		grpclog.Infof("Failed to start streaming: %v", err)
		return nil, metadata, err
	}
	dec := marshaler.NewDecoder(req.Body)
	handleSend := func() error {
		var protoReq {{.Method.RequestType.GoType .Method.Service.File.GoPkg.Path}}
		{{if and .Body (not (eq (len .Body.FieldPath) 0)) -}}
		{{- $protoReq := .Body.AssignableExprPrep "protoReq" .Method.Service.File.GoPkg.Path -}}
		{{- if ne "" $protoReq }}
		{{printf "%s" $protoReq }}
		{{- end}}
		err := dec.Decode(&{{.Body.AssignableExpr "protoReq" .Method.Service.File.GoPkg.Path}})
		{{else -}}
		err := dec.Decode(&protoReq)
		{{end -}}
		if err == io.EOF {
			return err
		}
		if err != nil {
			grpclog.Infof("Failed to decode request: %v", err)
			return err
		}
		if err := stream.Send(&protoReq); err != nil {
			grpclog.Infof("Failed to send request: %v", err)
			return err
		}
		return nil
	}
	go func() {
		for {
			if err := handleSend(); err != nil {
				break
			}
		}
		if err := stream.CloseSend(); err != nil {
			grpclog.Infof("Failed to terminate client stream: %v", err)
		}
	}()
	header, err := stream.Header()
	if err != nil {
		grpclog.Infof("Failed to get header from client: %v", err)
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil
}
{{end}}
{{if .NeedsWebsocket }}
{{template "websocket-func-signature" .}} {
	websocketConnection, err := mux.UpgradeToWebsocket(w, req)
	if err != nil {
		grpclog.Infof("Failed to upgrade HTTP request: %v", err)
		return
	}
	stream, err := client.{{.Method.GetName}}(ctx)
	if err != nil {
		grpclog.Infof("Failed to start gRPC stream: %v", err)
		mux.WebsocketError(ctx, outboundMarshaler, req, websocketConnection, err)
		if err := websocketConnection.Close(); err != nil {
			grpclog.Infof("Failed to close websocket connection: %v", err)
		}
		return
	}
	var protoReq {{.Method.RequestType.GoType .Method.Service.File.GoPkg.Path}}
	var protoRes {{.Method.ResponseType.GoType .Method.Service.File.GoPkg.Path}}
	{{$HasPartialRequestBody := and .Body (not (eq (len .Body.FieldPath) 0)) }}
	mux.ForwardWebsocket(ctx, req, stream, websocketConnection, inboundMarshaler, outboundMarshaler, {{if $HasPartialRequestBody}}request_type_{{.Method.Service.GetName}}_{{.Method.GetName}}_{{.Index}}{&protoReq}{{else}}&protoReq{{end}}, {{if .ResponseBody }}response_{{.Method.Service.GetName}}_{{.Method.GetName}}_{{.Index}}{&protoRes}{{else}}&protoRes{{end}})
}
{{end}}

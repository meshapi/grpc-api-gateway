{{$UseRequestContext := .UseRequestContext}}
{{range $svc := .Services}}
// Register{{$svc.GetName}}{{$.RegisterFuncSuffix}}FromEndpoint is same as Register{{$svc.GetName}}{{$.RegisterFuncSuffix}} but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func Register{{$svc.GetName}}{{$.RegisterFuncSuffix}}FromEndpoint(ctx context.Context, mux *gateway.ServeMux, endpoint string, opts []grpc.DialOption) error {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	Register{{$svc.GetName}}{{$.RegisterFuncSuffix}}(ctx, mux, conn)
	return nil
}

// Register{{$svc.GetName}}{{$.RegisterFuncSuffix}} registers the http handlers for service {{$svc.GetName}} to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func Register{{$svc.GetName}}{{$.RegisterFuncSuffix}}(ctx context.Context, mux *gateway.ServeMux, conn *grpc.ClientConn) {
	Register{{$svc.GetName}}{{$.RegisterFuncSuffix}}Client(ctx, mux, {{$svc.ClientConstructorName}}(conn))
}

// Register{{$svc.GetName}}{{$.RegisterFuncSuffix}}Client registers the http handlers for service {{$svc.GetName}}
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "{{$svc.InstanceName}}Client".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "{{$svc.InstanceName}}Client"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "{{$svc.InstanceName}}Client" to call the correct interceptors.
func Register{{$svc.GetName}}{{$.RegisterFuncSuffix}}Client(ctx context.Context, mux *gateway.ServeMux, client {{$svc.InstanceName}}Client) {
	{{range $m := $svc.Methods}}
	{{range $b := $m.Bindings}}
	mux.HandleWithParams({{$b.HTTPMethod | printf "%q"}}, "{{httpPath $b.PathTemplate}}", func(w http.ResponseWriter, req *http.Request, pathParams gateway.Params) {
	{{- if $UseRequestContext }}
		ctx, cancel := context.WithCancel(req.Context())
	{{- else -}}
		ctx, cancel := context.WithCancel(ctx)
	{{- end }}
		defer cancel()
		inboundMarshaler, outboundMarshaler := mux.MarshalerForRequest(req)
		var err error
		var annotatedContext context.Context
		{{- if $b.PathTemplate }}
		annotatedContext, err = gateway.AnnotateContext(ctx, mux, req, "/{{$svc.File.GetPackage}}.{{$svc.GetName}}/{{$m.GetName}}", gateway.WithHTTPPathPattern("{{httpPattern $b.PathTemplate}}"))
		{{- else -}}
		annotatedContext, err = gateway.AnnotateContext(ctx, mux, req, "/{{$svc.File.GetPackage}}.{{$svc.GetName}}/{{$m.GetName}}")
		{{- end }}
		if err != nil {
			mux.HTTPError(ctx, outboundMarshaler, w, req, err)
			return
		}
		{{if $b.NeedsWebsocket }}
		if mux.IsWebsocketUpgrade(req) {
			 websocket_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}}(annotatedContext, inboundMarshaler, outboundMarshaler, mux, client, w, req)
			 return
		}
		{{end}}
		{{ $CanContinue := or (or $b.NeedsChunkedTransfer $b.NeedsSSE) (not $m.GetServerStreaming) }}
		{{ if $CanContinue -}}
		resp, md, err := request_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}}(annotatedContext, inboundMarshaler, mux, client, req, pathParams)
		annotatedContext = gateway.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			mux.HTTPError(annotatedContext, outboundMarshaler, w, req, err)
			return
		}
		{{if $m.GetServerStreaming}}
		{{if $b.NeedsSSE }}
		{{if $b.ResponseBody -}}
		if mux.IsSSE(req) {
			mux.ForwardResponseStreamSSE(annotatedContext, outboundMarshaler, w, req, func() (proto.Message, error) {
				res, err := resp.Recv()
				return response_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}}{res}, err
			})
			return
		}
		{{else -}}
		if mux.IsSSE(req) {
			mux.ForwardResponseStreamSSE(annotatedContext, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() })
			return
		}
		{{end -}}
		{{end}}
		{{if $b.NeedsChunkedTransfer -}}
		{{if $b.ResponseBody -}}
		mux.ForwardResponseStreamChunked(annotatedContext, outboundMarshaler, w, req, func() (proto.Message, error) {
			res, err := resp.Recv()
			return response_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}}{res}, err
		})
		{{else -}}
		mux.ForwardResponseStreamChunked(annotatedContext, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() })
		{{end -}}
		{{else -}}
		mux.HTTPError(ctx, outboundMarshaler, w, req, gateway.ErrStreamingMethodNotAllowed{
			MethodSupportsWebsocket: {{ $b.NeedsWebsocket }},
			MethodSupportsSSE: {{ $b.NeedsSSE }},
			MethodSupportsChunkedTransfer: false,
		})
		{{end}}
		{{else}}
		{{ if $b.ResponseBody -}}
		mux.ForwardResponseMessage(annotatedContext, outboundMarshaler, w, req, response_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}}{resp.(*{{.Method.ResponseType.GoType .Method.Service.File.GoPkg.Path}})})
		{{ else -}}
		mux.ForwardResponseMessage(annotatedContext, outboundMarshaler, w, req, resp)
		{{end -}}
		{{end -}}
	{{else -}}
		mux.HTTPError(ctx, outboundMarshaler, w, req, gateway.ErrStreamingMethodNotAllowed{
			MethodSupportsWebsocket: {{ $b.NeedsWebsocket }},
			MethodSupportsSSE: false,
			MethodSupportsChunkedTransfer: false,
		})
	{{end -}}
	})
	{{end}}
	{{end}}
}

{{range $m := $svc.Methods}}
{{range $b := $m.Bindings}}
{{if and $b.Body (not (eq (len $b.Body.FieldPath) 0))}}
type request_type_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}} struct {
	*{{$m.RequestType.GoType $m.Service.File.GoPkg.Path}}
}

func (m request_type_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}}) XXX_RequestBody() any {
	return &{{$b.Body.AssignableExpr "m" $m.Service.File.GoPkg.Path}}
}
{{end}}
{{if $b.ResponseBody}}
type response_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}} struct {
	*{{$m.ResponseType.GoType $m.Service.File.GoPkg.Path}}
}

func (m response_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}}) XXX_ResponseBody() any {
	return {{$b.ResponseBody.AssignableExpr "m" $m.Service.File.GoPkg.Path}}
}
{{end}}
{{end}}
{{end}}

{{end}}

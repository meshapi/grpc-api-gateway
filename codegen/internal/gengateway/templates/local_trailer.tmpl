{{$UseRequestContext := .UseRequestContext}}
{{range $svc := .Services}}
// Register{{$svc.GetName}}{{$.RegisterFuncSuffix}}Server registers the http handlers for service {{$svc.GetName}} to "mux".
// UnaryRPC     :call {{$svc.GetName}}Server directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using Register{{$svc.GetName}}{{$.RegisterFuncSuffix}}FromEndpoint instead.
func Register{{$svc.GetName}}{{$.RegisterFuncSuffix}}Server(ctx context.Context, mux *gateway.ServeMux, server {{$svc.InstanceName}}Server) error {
	{{range $m := $svc.Methods}}
	{{range $b := $m.Bindings}}
	{{if or $m.GetClientStreaming $m.GetServerStreaming}}
	mux.HandleWithParams({{$b.HTTPMethod | printf "%q"}}, "{{httpPath $b.PathTemplate}}", func(w http.ResponseWriter, req *http.Request, pathParams gateway.Params) {
		err := status.Error(codes.Unimplemented, "streaming calls are not yet supported in the in-process transport")
		_, outboundMarshaler := mux.MarshalerForRequest(req)
		mux.HTTPError(ctx, outboundMarshaler, w, req, err)
		return
	})
	{{else}}
	mux.HandleWithParams({{$b.HTTPMethod | printf "%q"}}, "{{httpPath $b.PathTemplate}}",  func(w http.ResponseWriter, req *http.Request, pathParams gateway.Params) {
	{{- if $UseRequestContext }}
		ctx, cancel := context.WithCancel(req.Context())
	{{- else -}}
		ctx, cancel := context.WithCancel(ctx)
	{{- end }}
		defer cancel()
		var stream gateway.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := mux.MarshalerForRequest(req)
		var err error
		var annotatedContext context.Context
		{{- if $b.PathTemplate }}
		annotatedContext, err = gateway.AnnotateIncomingContext(ctx, mux, req, "/{{$svc.File.GetPackage}}.{{$svc.GetName}}/{{$m.GetName}}", gateway.WithHTTPPathPattern("{{httpPattern $b.PathTemplate}}"))
		{{- else -}}
		annotatedContext, err = gateway.AnnotateIncomingContext(ctx, mux, req, "/{{$svc.File.GetPackage}}.{{$svc.GetName}}/{{$m.GetName}}")
		{{- end }}
		if err != nil {
			mux.HTTPError(ctx, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}}(annotatedContext, inboundMarshaler, mux, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = gateway.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			mux.HTTPError(annotatedContext, outboundMarshaler, w, req, err)
			return
		}

		{{ if $b.ResponseBody -}}
		mux.ForwardResponseMessage(annotatedContext, outboundMarshaler, w, req, response_{{$svc.GetName}}_{{$m.GetName}}_{{$b.Index}}{resp.(*{{.Method.ResponseType.GoType .Method.Service.File.GoPkg.Path}})})
		{{ else -}}
		mux.ForwardResponseMessage(annotatedContext, outboundMarshaler, w, req, resp)
		{{end -}}
	})
	{{end}}
	{{end}}
	{{end}}
	return nil
}
{{end}}
